Install the dependencies provided in environment.yaml using miniconda3
and activate the environment

    conda activate hrrrcast-live

You should then be able to load the models using something like

    tf.keras.models.load_model("model_97.keras", safe_mode=False)

The inputs dimensions are "batch x latitude x longitude x channels"
     B x 530 x 900 x 77

The outputs have 3 less channels (static inputs + lead time channel)

     B x 530 x 900 x 74

The 530x900 grid points come from considering every other gridpoint of the original
HRRR grid which is 1059 x 1799

The description of the inputs and how they are normalized follows

1. Inputs

The inputs to the model are

   INPUTS_3D = ["UGRD", "VGRD", "VVEL", "TMP", "HGT", "SPFH"]
   INPUTS_2D = ["T2M", "REFC"]

The pressure levels for the 3D fields are

    PRESSURE_LEVELS = [ 
        200,
        300,
        475,
        800,
        825,
        850,
        875,
        900,
        925,
        950,
        975,
        1000,
    ]

The total number of primary channesl is thus 6 x 12 + 2 = 74

These inputs are fed normalized to the neural network with normalization factors (mean and std) providied in normalize.nc 

   x_bar = (x - mean) / std

2. Static inputs

    CONSTANTS = [ 
        "LAND",
        "OROG",
    ]

  These are constant inputs (land mask and orography height) fed as 2 additonal channels.
  They are also normalized by mean & std and you can compute them dynamically like

        self.c_mean = self.consts.mean(("lat", "lon")).compute()
        self.c_std = self.consts.std(("lat", "lon")).compute()
        self.consts = (self.consts - self.c_mean) / self.c_std
        self.consts = self.consts.fillna(0)
        self.consts = self.consts.load()

3. Lead time channel

   The network is trained simultaneously for 3 lead times [1, 3, 6] hrs
   You can feed any lead time between 1-6 directly to the network after normalizing
   it by dividing by 6. Example, to predict at 3 hrs, feed a constant channel 3/6=0.5
   where all the latxlong grid points are set to 0.5


   For prediction beyond 6 hrs, you have to rollout in the Pangu manner to minimize errors.
   Example, a 16 hr forecast would require
      2 x 6hrs + 1 x 3hr + 1 x 1hr

That will make the total number of input channels to 74 + 2 + 1 = 77
The output has only the primary channels 74

Output denormalization
----------------------
The output of the NN is normalized too so it has to be denormalized by the same normalization
factors you used to normalized them.

   x = x_bar * std + mean

Models
------
There are two models small and big (2x more parameters). Use the big on on A100 with 80 gbs
and the small one on A100 with 40 gbs.

That is it.
Let me know if something is not clear.

